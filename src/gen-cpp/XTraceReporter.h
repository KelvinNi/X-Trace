/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef XTraceReporter_H
#define XTraceReporter_H

#include <TProcessor.h>
#include "xtrace_types.h"

namespace xtrace {

class XTraceReporterIf {
 public:
  virtual ~XTraceReporterIf() {}
  static void getStaticLimitedReflection(facebook::thrift::reflection::limited::Service & _return);
  virtual void ping() = 0;
  virtual void sendReport(const std::string& report) = 0;
};

class XTraceReporterNull : virtual public XTraceReporterIf {
 public:
  virtual ~XTraceReporterNull() {}
  void ping() {
    return;
  }
  void sendReport(const std::string& report) {
    return;
  }
};

class XTraceReporter_ping_args {
 public:

  XTraceReporter_ping_args() {
  }

  virtual ~XTraceReporter_ping_args() throw() {}


  bool operator == (const XTraceReporter_ping_args & rhs) const
  {
    return true;
  }
  bool operator != (const XTraceReporter_ping_args &rhs) const {
    return !(*this == rhs);
  }

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_ping_pargs {
 public:


  virtual ~XTraceReporter_ping_pargs() throw() {}


  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_ping_result {
 public:

  XTraceReporter_ping_result() {
  }

  virtual ~XTraceReporter_ping_result() throw() {}


  bool operator == (const XTraceReporter_ping_result & rhs) const
  {
    return true;
  }
  bool operator != (const XTraceReporter_ping_result &rhs) const {
    return !(*this == rhs);
  }

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_ping_presult {
 public:


  virtual ~XTraceReporter_ping_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class XTraceReporter_sendReport_args {
 public:

  XTraceReporter_sendReport_args() : report("") {
  }

  virtual ~XTraceReporter_sendReport_args() throw() {}

  std::string report;

  struct __isset {
    __isset() : report(false) {}
    bool report;
  } __isset;

  bool operator == (const XTraceReporter_sendReport_args & rhs) const
  {
    if (!(report == rhs.report))
      return false;
    return true;
  }
  bool operator != (const XTraceReporter_sendReport_args &rhs) const {
    return !(*this == rhs);
  }

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_sendReport_pargs {
 public:


  virtual ~XTraceReporter_sendReport_pargs() throw() {}

  const std::string* report;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_sendReport_result {
 public:

  XTraceReporter_sendReport_result() {
  }

  virtual ~XTraceReporter_sendReport_result() throw() {}


  bool operator == (const XTraceReporter_sendReport_result & rhs) const
  {
    return true;
  }
  bool operator != (const XTraceReporter_sendReport_result &rhs) const {
    return !(*this == rhs);
  }

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class XTraceReporter_sendReport_presult {
 public:


  virtual ~XTraceReporter_sendReport_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class XTraceReporterClient : virtual public XTraceReporterIf {
 public:
  XTraceReporterClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  XTraceReporterClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> iprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  void ping();
  void send_ping();
  void recv_ping();
  void sendReport(const std::string& report);
  void send_sendReport(const std::string& report);
  void recv_sendReport();
 protected:
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> poprot_;
  facebook::thrift::protocol::TProtocol* iprot_;
  facebook::thrift::protocol::TProtocol* oprot_;
};

class XTraceReporterProcessor : virtual public facebook::thrift::TProcessor {
 protected:
  boost::shared_ptr<XTraceReporterIf> iface_;
  virtual bool process_fn(facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (XTraceReporterProcessor::*)(int32_t, facebook::thrift::protocol::TProtocol*, facebook::thrift::protocol::TProtocol*)> processMap_;
  void process_ping(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_sendReport(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
 public:
  XTraceReporterProcessor(boost::shared_ptr<XTraceReporterIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &XTraceReporterProcessor::process_ping;
    processMap_["sendReport"] = &XTraceReporterProcessor::process_sendReport;
  }

  virtual bool process(boost::shared_ptr<facebook::thrift::protocol::TProtocol> piprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> poprot);
  virtual ~XTraceReporterProcessor() {}
};

class XTraceReporterMultiface : virtual public XTraceReporterIf {
 public:
  XTraceReporterMultiface(std::vector<boost::shared_ptr<XTraceReporterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~XTraceReporterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<XTraceReporterIf> > ifaces_;
  XTraceReporterMultiface() {}
  void add(boost::shared_ptr<XTraceReporterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

  void sendReport(const std::string& report) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->sendReport(report);
    }
  }

};

} // namespace

#endif
