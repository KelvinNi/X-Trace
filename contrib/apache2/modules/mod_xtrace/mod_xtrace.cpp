/* 
**  mod_xtrace.cpp 
**  [Initially Autogenerated via ``apxs -n xtrace -g'']
**  This is C++ code, compile and link with a c++ compiler.
**
**  Author: Rodrigo Fonseca
*/ 

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"
#include "util_filter.h"
#include "http_request.h"
#include "apr_strings.h"


#include "Xtr.h"

#define DEBUG 1

using namespace xtr;

/* Forward declaration. Tell g++ to be nice and mangle compatibly */
#ifdef __cplusplus
extern "C" module AP_MODULE_DECLARE_DATA test_module;
#endif

static int mod_xtrace_cfg_task_id_len = 12;
static int mod_xtrace_cfg_op_id_len   = 8;
static int mod_xtrace_cfg_prob        = 1000000;

static int xtrace_output_filter(ap_filter_t *f, apr_bucket_brigade *in)
{
    request_rec *r = f->r;

    Metadata x;
    bool log = 1;

    char buf[XTR_MD_MAX_LENGTH];
    const char* in_xtrace = apr_table_get(r->notes, "X-Trace");
    const char* cur_xtrace = apr_table_get(r->headers_out, "X-Trace");

    if (in_xtrace) {
        if (log) {
            Metadata x = Metadata::createFromString(in_xtrace, strlen(in_xtrace));
            if (x.isValid()) {
                Event xte;
                char *label = apr_pstrcat(r->pool, "Sending reply",  NULL);
    
                xte.addEdge(x);
                xte.addInfo("Agent","Apache");
                xte.addInfo("Label", label);
                xte.addInfo("Host", r->server->server_hostname);
                x = xte.getMetadata();
    
                xte.sendReport();           
                apr_table_set(r->headers_out, "X-Trace", x.toString(buf, sizeof(buf)));
            }
        } else {
            apr_table_set(r->headers_out, "X-Trace", in_xtrace);
        }
    }    
    
    ap_remove_output_filter(f);
    return ap_pass_brigade(f->next, in);
}

static int xtrace_add_xtrace(request_rec *r)
{
    char buf[XTR_MD_MAX_LENGTH];
    Metadata x(mod_xtrace_cfg_task_id_len, mod_xtrace_cfg_op_id_len);
    
    bool log = 1;
    bool add_xtrace = 1;

    const char* in_xtrace = apr_table_get(r->headers_in, "X-Trace");

    /* See if incoming X-Trace header, or if we should add our own */
    if (!in_xtrace && add_xtrace) {
        x.setRandomTaskId(mod_xtrace_cfg_task_id_len);
    } else {
       x = Metadata::createFromString(in_xtrace, strlen(in_xtrace)); 
       apr_table_unset(r->headers_in, "X-Trace");
    }

    if (x.isValid()) {
        if (log) {
            //report, add the next request to the header and to the note
            Event xte;
            char *label = apr_pstrcat(r->pool, "Received Request ", r->uri,  NULL);

            xte.addEdge(x);
            xte.addInfo("Agent","Apache");
            xte.addInfo("Label", label);
            xte.addInfo("Host", r->server->server_hostname);
            xte.addInfo("Tag","apache-mod-xtrace");
            x = xte.getMetadata();

            xte.sendReport();
#ifdef DEBUG
            fprintf(stderr,xte.getReport().c_str());
#endif

            x.toString(buf, sizeof(buf));
            fprintf(stderr,"buf: %s\n", buf);
            apr_table_set(r->headers_in, "X-Trace", buf);
            apr_table_set(r->notes, "X-Trace", buf);

        } else {
            // just add the current metadata to the header and to the notes
            x.toString(buf, sizeof(buf));
            apr_table_set(r->headers_in, "X-Trace", buf);
            apr_table_set(r->notes, "X-Trace", buf);
        }
    } else 
        fprintf(stderr,"invalid metadata\n");
#ifdef DEBUG
    fflush(stderr);
#endif
}

static void xtrace_insert_filters(request_rec *r) {
    ap_add_output_filter("XTRACE_OUT", NULL, r, r->connection) ;
}
 

static void xtrace_register_hooks(apr_pool_t *p)
{
    Reporter::init();

    ap_register_output_filter("XTRACE_OUT", xtrace_output_filter,
                              NULL, AP_FTYPE_CONTENT_SET);
    ap_hook_insert_filter(xtrace_insert_filters, NULL, NULL, APR_HOOK_MIDDLE) ;

    ap_hook_post_read_request(xtrace_add_xtrace, NULL, NULL, APR_HOOK_FIRST);
}

/* Dispatch list for API hooks */
#ifdef __cplusplus
extern "C" {
#endif
module AP_MODULE_DECLARE_DATA xtrace_module = {
    STANDARD20_MODULE_STUFF, 
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    xtrace_register_hooks  /* register hooks                      */
};
#ifdef __cplusplus
}; //extern "C"
#endif
